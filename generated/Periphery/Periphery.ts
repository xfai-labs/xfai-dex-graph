// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Periphery__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Periphery extends ethereum.SmartContract {
  static bind(address: Address): Periphery {
    return new Periphery("Periphery", address);
  }

  removeLiquidity(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _liquidity: BigInt,
    _amount0Min: BigInt,
    _amount1Min: BigInt,
    _deadline: BigInt,
  ): Periphery__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,address,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromUnsignedBigInt(_amount0Min),
        ethereum.Value.fromUnsignedBigInt(_amount1Min),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return new Periphery__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_removeLiquidity(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _liquidity: BigInt,
    _amount0Min: BigInt,
    _amount1Min: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<Periphery__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,address,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromUnsignedBigInt(_amount0Min),
        ethereum.Value.fromUnsignedBigInt(_amount1Min),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Periphery__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  swapExactTokensForETH(
    _to: Address,
    _token: Address,
    _amountIn: BigInt,
    _amountOutMin: BigInt,
    _deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapExactTokensForETH",
      "swapExactTokensForETH(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_amountOutMin),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapExactTokensForETH(
    _to: Address,
    _token: Address,
    _amountIn: BigInt,
    _amountOutMin: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactTokensForETH",
      "swapExactTokensForETH(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_amountOutMin),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactTokensForTokens(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _amount0In: BigInt,
    _amount1OutMin: BigInt,
    _deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount0In),
        ethereum.Value.fromUnsignedBigInt(_amount1OutMin),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapExactTokensForTokens(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _amount0In: BigInt,
    _amount1OutMin: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount0In),
        ethereum.Value.fromUnsignedBigInt(_amount1OutMin),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapTokensForExactETH(
    _to: Address,
    _token: Address,
    _amountOut: BigInt,
    _amountInMax: BigInt,
    _deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapTokensForExactETH",
      "swapTokensForExactETH(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountOut),
        ethereum.Value.fromUnsignedBigInt(_amountInMax),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapTokensForExactETH(
    _to: Address,
    _token: Address,
    _amountOut: BigInt,
    _amountInMax: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokensForExactETH",
      "swapTokensForExactETH(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountOut),
        ethereum.Value.fromUnsignedBigInt(_amountInMax),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapTokensForExactTokens(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _amount1Out: BigInt,
    _amount0InMax: BigInt,
    _deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount1Out),
        ethereum.Value.fromUnsignedBigInt(_amount0InMax),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapTokensForExactTokens(
    _to: Address,
    _token0: Address,
    _token1: Address,
    _amount1Out: BigInt,
    _amount0InMax: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount1Out),
        ethereum.Value.fromUnsignedBigInt(_amount0InMax),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountTokenDesired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amountETHMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token0(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amount0Min(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _amount1Min(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapETHForExactTokensCall extends ethereum.Call {
  get inputs(): SwapETHForExactTokensCall__Inputs {
    return new SwapETHForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapETHForExactTokensCall__Outputs {
    return new SwapETHForExactTokensCall__Outputs(this);
  }
}

export class SwapETHForExactTokensCall__Inputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapETHForExactTokensCall__Outputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get input(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactETHForTokensCall extends ethereum.Call {
  get inputs(): SwapExactETHForTokensCall__Inputs {
    return new SwapExactETHForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactETHForTokensCall__Outputs {
    return new SwapExactETHForTokensCall__Outputs(this);
  }
}

export class SwapExactETHForTokensCall__Inputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactETHForTokensCall__Outputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get output(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactTokensForETHCall extends ethereum.Call {
  get inputs(): SwapExactTokensForETHCall__Inputs {
    return new SwapExactTokensForETHCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForETHCall__Outputs {
    return new SwapExactTokensForETHCall__Outputs(this);
  }
}

export class SwapExactTokensForETHCall__Inputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForETHCall__Outputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get output(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token0(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount0In(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amount1OutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapTokensForExactETHCall extends ethereum.Call {
  get inputs(): SwapTokensForExactETHCall__Inputs {
    return new SwapTokensForExactETHCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactETHCall__Outputs {
    return new SwapTokensForExactETHCall__Outputs(this);
  }
}

export class SwapTokensForExactETHCall__Inputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountInMax(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactETHCall__Outputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get input(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token0(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount1Out(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amount0InMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amount0In(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
