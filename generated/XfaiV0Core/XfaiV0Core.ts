// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ChangedOwner extends ethereum.Event {
  get params(): ChangedOwner__Params {
    return new ChangedOwner__Params(this);
  }
}

export class ChangedOwner__Params {
  _event: ChangedOwner;

  constructor(event: ChangedOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FlashLoan extends ethereum.Event {
  get params(): FlashLoan__Params {
    return new FlashLoan__Params(this);
  }
}

export class FlashLoan__Params {
  _event: FlashLoan;

  constructor(event: FlashLoan) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get wethAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InfinityNFTFeeChange extends ethereum.Event {
  get params(): InfinityNFTFeeChange__Params {
    return new InfinityNFTFeeChange__Params(this);
  }
}

export class InfinityNFTFeeChange__Params {
  _event: InfinityNFTFeeChange;

  constructor(event: InfinityNFTFeeChange) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LpFeeChange extends ethereum.Event {
  get params(): LpFeeChange__Params {
    return new LpFeeChange__Params(this);
  }
}

export class LpFeeChange__Params {
  _event: LpFeeChange;

  constructor(event: LpFeeChange) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get p(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get input(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get output(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class XfaiV0Core__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Out(): BigInt {
    return this.value0;
  }

  getAmount1Out(): BigInt {
    return this.value1;
  }
}

export class XfaiV0Core__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0In(): BigInt {
    return this.value0;
  }

  getAmount1Out(): BigInt {
    return this.value1;
  }
}

export class XfaiV0Core extends ethereum.SmartContract {
  static bind(address: Address): XfaiV0Core {
    return new XfaiV0Core("XfaiV0Core", address);
  }

  burn(
    _token0: Address,
    _token1: Address,
    _to: Address,
  ): XfaiV0Core__burnResult {
    let result = super.call(
      "burn",
      "burn(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return new XfaiV0Core__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_burn(
    _token0: Address,
    _token1: Address,
    _to: Address,
  ): ethereum.CallResult<XfaiV0Core__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XfaiV0Core__burnResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  getTotalFee(): BigInt {
    let result = super.call("getTotalFee", "getTotalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTotalFee", "getTotalFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  infinityNFTFee(): BigInt {
    let result = super.call("infinityNFTFee", "infinityNFTFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_infinityNFTFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "infinityNFTFee",
      "infinityNFTFee():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpFee(): BigInt {
    let result = super.call("lpFee", "lpFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpFee", "lpFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(_token: Address, _to: Address): BigInt {
    let result = super.call("mint", "mint(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_to),
    ]);

    return result[0].toBigInt();
  }

  try_mint(_token: Address, _to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swap(
    _token0: Address,
    _token1: Address,
    _to: Address,
  ): XfaiV0Core__swapResult {
    let result = super.call(
      "swap",
      "swap(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return new XfaiV0Core__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_swap(
    _token0: Address,
    _token1: Address,
    _to: Address,
  ): ethereum.CallResult<XfaiV0Core__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XfaiV0Core__swapResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _infinityNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _wETH(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lpFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _infinityNFTFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0Out(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ChangeInfinityNFTFeeCall extends ethereum.Call {
  get inputs(): ChangeInfinityNFTFeeCall__Inputs {
    return new ChangeInfinityNFTFeeCall__Inputs(this);
  }

  get outputs(): ChangeInfinityNFTFeeCall__Outputs {
    return new ChangeInfinityNFTFeeCall__Outputs(this);
  }
}

export class ChangeInfinityNFTFeeCall__Inputs {
  _call: ChangeInfinityNFTFeeCall;

  constructor(call: ChangeInfinityNFTFeeCall) {
    this._call = call;
  }

  get _newLnftFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeInfinityNFTFeeCall__Outputs {
  _call: ChangeInfinityNFTFeeCall;

  constructor(call: ChangeInfinityNFTFeeCall) {
    this._call = call;
  }
}

export class ChangeLpFeeCall extends ethereum.Call {
  get inputs(): ChangeLpFeeCall__Inputs {
    return new ChangeLpFeeCall__Inputs(this);
  }

  get outputs(): ChangeLpFeeCall__Outputs {
    return new ChangeLpFeeCall__Outputs(this);
  }
}

export class ChangeLpFeeCall__Inputs {
  _call: ChangeLpFeeCall;

  constructor(call: ChangeLpFeeCall) {
    this._call = call;
  }

  get _newLpFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeLpFeeCall__Outputs {
  _call: ChangeLpFeeCall;

  constructor(call: ChangeLpFeeCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _wethAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get _p(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0In(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}
